/**
 * @page client_tutorial C++ Client API Tutorial
 *
 * [TOC]
 *
 * @section sec_Overview Overview
 * This page introduces the OLA Client API, and provides sample programs to
 * send and receive DMX512 data from olad.
 *
 * @section sec_Building Building
 * Once OLA is installed on your system, the examples can be built with:
 *
 *     g++ example.cpp $(pkg-config --cflags --libs libola)
 *
 * @section sec_StreamingClient Streaming Client Sender
 *
 * The quickest way to get started is by using ola::StreamingClient. The
 * program below sends 100 frames of DMX data to the olad server on universe 1.
 * The frames are sent 25ms apart which gives a frame rate of 40 fps.
 *
 * Each frame consists of 512 DMX data slots. The first slot is incremented by
 * one each frame, the other slots are always 0. This produces the following
 * DMX frames:
 *
 * ~~~~~~~~~~~~~~~~~~~~~
 *   Time (ms)  DMX Data
 *        0     0,0,0,0,.....
 *       25     1,0,0,0,.....
 *       50     2,0,0,0,.....
 *       75     3,0,0,0,.....
 *     ....
 *     2475     100,0,0,0,.....
 * ~~~~~~~~~~~~~~~~~~~~~
 *
 * @snippet streaming_client.cpp Tutorial Example
 *
 * While ola::StreamingClient is easy to use it has the drawback that it can
 * only send DMX512 data. It's not possible to retrieve information (like the
 * active universes etc.) from olad using the StreamingClient.
 *
 * @section sec_CallbackClient Callback Client Sender
 *
 * The ola::OlaCallbackClient provides a much richer interface for interacting
 * with the server. However, because of this it's slightly harder to use.
 *
 * The following code behaves thes same as the \ref sec_StreamingClient example.
 *
 * @snippet callback_client_transmit.cpp Tutorial Example
 *
 * @section sec_Receiver DMX Receiver
 *
 * @snippet receiver.cpp Tutorial Example
 */
